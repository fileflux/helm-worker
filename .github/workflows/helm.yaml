name: Helm CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*' 
  pull_request:
    branches:
      - main  
  workflow_dispatch: 

permissions:
  contents: write
  
jobs:
  lint-and-validate:
    name: Lint and Validate Helm Chart
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.15.4

      - name: Helm lint
        run: helm lint .

      - name: Helm validate
        run: helm template . --dry-run

  release:
      name: Publish Helm Chart to GitHub Releases
      runs-on: ubuntu-latest
      needs: lint-and-validate 
      if: startsWith(github.ref, 'refs/tags/v')  

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Helm
          uses: azure/setup-helm@v3
          with:
            version: v3.15.4

        - name: Create Helm package
          run: helm package .

        - name: Get the version
          id: get_version
          run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

        - name: Upload Helm package as GitHub release asset
          uses: softprops/action-gh-release@v1
          with:
            files: "*.tgz"
            tag_name: ${{ github.ref }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-and-push-tag:
    name: Create and Push Tag
    runs-on: ubuntu-latest
    needs: lint-and-validate
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Get version from Chart.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version' ./Chart.yaml | cut -d ' ' -f 2)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag "v${{ steps.get_version.outputs.VERSION }}"
          git push origin "v${{ steps.get_version.outputs.VERSION }}"